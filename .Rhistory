reduced_dim_K %>% dplyr::rename(
source = 'sample_name',
source_dim_1 = 'dim_1',
source_dim_2 = 'dim_2'
),
by = 'source'
) %>%
dplyr::left_join(
.data,
reduced_dim_K %>% dplyr::rename(
target = 'sample_name',
target_dim_1 = 'dim_1',
target_dim_2 = 'dim_2'
),
by = 'target'
) %>%
dplyr::select(c('source','target','weight','source_dim_1','source_dim_2',
'target_dim_1','target_dim_2'))
edges <- monocle@minSpanningTree %>%
igraph::as_data_frame() %>%
dplyr::rename(source = 'from', target = 'to')
edges <- dplyr::left_join(
edges,
reduced_dim_K %>% dplyr::rename(
source = 'sample_name',
source_dim_1 = 'dim_1',
source_dim_2 = 'dim_2'
),
by = 'source'
)
edges <- dplyr::left_join(
edges,
reduced_dim_K %>% dplyr::rename(
target = 'sample_name',
target_dim_1 = 'dim_1',
target_dim_2 = 'dim_2'
),
by = 'target'
) %>%
dplyr::select(c('source','target','weight','source_dim_1','source_dim_2',
'target_dim_1','target_dim_2'))
edges
temp_trajectory_info <- data.frame(
pseudotime = monocle@phenoData@data[[column_pseudotime]],
state = monocle@phenoData@data[[column_state]],
row.names = rownames(monocle@phenoData@data)
)
temp_reducedDimS <- t(monocle@reducedDimS) %>% as.data.frame()
trajectory_info <- t(monocle@reducedDimS) %>%
as.data.frame() %>%
dplyr::rename(DR_1 = 1, DR_2 = 2) %>%
dplyr::mutate(cell = rownames(temp_reducedDimS)) %>%
dplyr::left_join(
.data,
temp_trajectory_info %>% dplyr::mutate(cell = rownames(temp_trajectory_info)),
by = 'cell'
) %>%
dplyr::left_join(
seurat@meta.data %>% dplyr::mutate(cell = rownames(seurat@meta.data)),
.data,
by = 'cell'
) %>%
dplyr::select(c('DR_1','DR_2','pseudotime','state','cell'))
rownames(trajectory_info) <- trajectory_info$cell
trajectory_info <- trajectory_info %>% dplyr::select(-'cell')
column_pseudotime = 'Pseudotime'
column_state = 'State'
temp_trajectory_info <- data.frame(
pseudotime = monocle@phenoData@data[[column_pseudotime]],
state = monocle@phenoData@data[[column_state]],
row.names = rownames(monocle@phenoData@data)
)
temp_reducedDimS <- t(monocle@reducedDimS) %>% as.data.frame()
trajectory_info <- t(monocle@reducedDimS) %>%
as.data.frame() %>%
dplyr::rename(DR_1 = 1, DR_2 = 2) %>%
dplyr::mutate(cell = rownames(temp_reducedDimS)) %>%
dplyr::left_join(
.data,
temp_trajectory_info %>% dplyr::mutate(cell = rownames(temp_trajectory_info)),
by = 'cell'
) %>%
dplyr::left_join(
seurat@meta.data %>% dplyr::mutate(cell = rownames(seurat@meta.data)),
.data,
by = 'cell'
) %>%
dplyr::select(c('DR_1','DR_2','pseudotime','state','cell'))
rownames(trajectory_info) <- trajectory_info$cell
trajectory_info <- trajectory_info %>% dplyr::select(-'cell')
temp_trajectory_info <- data.frame(
pseudotime = monocle@phenoData@data[[column_pseudotime]],
state = monocle@phenoData@data[[column_state]],
row.names = rownames(monocle@phenoData@data)
)
temp_reducedDimS <- t(monocle@reducedDimS) %>% as.data.frame()
trajectory_info <- t(monocle@reducedDimS) %>%
as.data.frame() %>%
dplyr::rename(DR_1 = 1, DR_2 = 2) %>%
dplyr::mutate(cell = rownames(temp_reducedDimS))
trajectory_info <- dplyr::left_join(
trajectory_info,
temp_trajectory_info %>% dplyr::mutate(cell = rownames(temp_trajectory_info)),
by = 'cell'
)
trajectory_info <- dplyr::left_join(
seurat@meta.data %>% dplyr::mutate(cell = rownames(seurat@meta.data)),
trajectory_info,
by = 'cell'
) %>%
dplyr::select(c('DR_1','DR_2','pseudotime','state','cell'))
rownames(trajectory_info) <- trajectory_info$cell
trajectory_info <- trajectory_info %>% dplyr::select(-'cell')
if ( is.null(seurat@misc$trajectory) ) {
seurat@misc$trajectory <- list()
}
seurat@misc$trajectory$monocle2[[trajectory_name]] <- list(
meta = trajectory_info,
edges = edges
)
View(trajectory_info)
View(temp_trajectory_info)
devtools::install_local('.', force = TRUE)
devtools::install_local('.', force = TRUE)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(dplyr)
library(Seurat)
library(monocle)
library(cerebroApp)
set.seed(1234567)
pbmc <- read.table(file = system.file('extdata', 'pbmc_raw.txt', package = 'Seurat'), as.is = TRUE)
seurat <- CreateSeuratObject(
project = 'pbmc',
counts = pbmc,
min.cells = 10
)
seurat <- subset(seurat, subset = nCount_RNA > 50 & nFeature_RNA > 10)
seurat <- NormalizeData(seurat)
seurat <- FindVariableFeatures(seurat)
seurat <- ScaleData(seurat, vars.to.regress = 'nCount_RNA')
seurat <- RunPCA(seurat, npcs = 30, features = seurat@assays$RNA@var.features)
seurat <- FindNeighbors(seurat)
seurat <- FindClusters(seurat, resolution = 0.5)
seurat <- BuildClusterTree(
seurat,
dims = 1:30,
reorder = TRUE,
reorder.numeric = TRUE
)
seurat[['cluster']] <- factor(
as.character(seurat@meta.data$tree.ident),
levels = sort(unique(seurat@meta.data$tree.ident))
)
seurat@meta.data$seurat_clusters <- NULL
seurat@meta.data$RNA_snn_res.0.5 <- NULL
seurat@meta.data$tree.ident <- NULL
seurat <- RunUMAP(
seurat,
reduction.name = 'UMAP',
reduction.key = 'UMAP_',
dims = 1:30,
n.components = 2,
seed.use = 100
)
seurat <- RunUMAP(
seurat,
reduction.name = 'UMAP_3D',
reduction.key = 'UMAP3D_',
dims = 1:30,
n.components = 3,
seed.use = 100
)
seurat@meta.data$sample <- factor('pbmc', levels = 'pbmc')
seurat@misc$experiment <- list(
experiment_name = 'pbmc',
organism = 'hg',
date_of_analysis = Sys.Date()
)
seurat@misc$parameters <- list(
gene_nomenclature = 'gene_name',
discard_genes_expressed_in_fewer_cells_than = 10,
keep_mitochondrial_genes = TRUE,
variables_to_regress_out = 'nUMI',
number_PCs = 30,
tSNE_perplexity = 30,
cluster_resolution = 0.5
)
seurat@misc$parameters$filtering <- list(
UMI_min = 100,
UMI_max = Inf,
genes_min = 50,
genes_max = Inf
)
seurat@misc$technical_info <- list(
'R' = capture.output(devtools::session_info())
)
seurat <- addPercentMtRibo(
seurat,
organism = 'hg',
gene_nomenclature = 'name'
)
seurat <- getMostExpressedGenes(
seurat,
column_sample = 'sample',
column_cluster = 'cluster'
)
seurat <- getMarkerGenes(
seurat,
organism = 'hg',
column_sample = 'sample',
column_cluster = 'cluster'
)
seurat <- getEnrichedPathways(
seurat,
column_sample = 'sample',
column_cluster = 'cluster',
adj_p_cutoff = 0.01,
max_terms = 100
)
example_gene_set <- system.file("extdata", "example_gene_set.gmt", package = "cerebroApp")
seurat <- performGeneSetEnrichmentAnalysis(
seurat,
GMT_file = example_gene_set,
column_sample = 'sample',
column_cluster = 'cluster',
thresh_p_val = 0.05,
thresh_q_val = 0.1,
parallel.sz = 1,
verbose = FALSE
)
monocle_all_cells <- newCellDataSet(
seurat@assays$RNA@data,
phenoData = new('AnnotatedDataFrame', data = seurat@meta.data),
featureData = new('AnnotatedDataFrame', data = data.frame(
gene_short_name = rownames(seurat@assays$RNA@data),
row.names = rownames(seurat@assays$RNA@data))
)
)
monocle_all_cells <- estimateSizeFactors(monocle_all_cells)
monocle_all_cells <- estimateDispersions(monocle_all_cells)
monocle_all_cells <- setOrderingFilter(monocle_all_cells, seurat@assays$RNA@var.features)
monocle_all_cells <- reduceDimension(monocle_all_cells, max_components = 2, method = 'DDRTree')
monocle_all_cells <- orderCells(monocle_all_cells)
seurat <- extractMonocleTrajectory(monocle_all_cells, seurat, 'all_cells')
devtools::install_local('.', force=TRUE)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(dplyr)
library(Seurat)
library(monocle)
library(cerebroApp)
set.seed(1234567)
pbmc <- read.table(file = system.file('extdata', 'pbmc_raw.txt', package = 'Seurat'), as.is = TRUE)
seurat <- CreateSeuratObject(
project = 'pbmc',
counts = pbmc,
min.cells = 10
)
seurat <- subset(seurat, subset = nCount_RNA > 50 & nFeature_RNA > 10)
seurat <- NormalizeData(seurat)
seurat <- FindVariableFeatures(seurat)
seurat <- ScaleData(seurat, vars.to.regress = 'nCount_RNA')
seurat <- RunPCA(seurat, npcs = 30, features = seurat@assays$RNA@var.features)
seurat <- FindNeighbors(seurat)
seurat <- FindClusters(seurat, resolution = 0.5)
seurat <- BuildClusterTree(
seurat,
dims = 1:30,
reorder = TRUE,
reorder.numeric = TRUE
)
seurat[['cluster']] <- factor(
as.character(seurat@meta.data$tree.ident),
levels = sort(unique(seurat@meta.data$tree.ident))
)
seurat@meta.data$seurat_clusters <- NULL
seurat@meta.data$RNA_snn_res.0.5 <- NULL
seurat@meta.data$tree.ident <- NULL
seurat <- RunUMAP(
seurat,
reduction.name = 'UMAP',
reduction.key = 'UMAP_',
dims = 1:30,
n.components = 2,
seed.use = 100
)
seurat <- RunUMAP(
seurat,
reduction.name = 'UMAP_3D',
reduction.key = 'UMAP3D_',
dims = 1:30,
n.components = 3,
seed.use = 100
)
seurat@meta.data$sample <- factor('pbmc', levels = 'pbmc')
seurat@misc$experiment <- list(
experiment_name = 'pbmc',
organism = 'hg',
date_of_analysis = Sys.Date()
)
seurat@misc$parameters <- list(
gene_nomenclature = 'gene_name',
discard_genes_expressed_in_fewer_cells_than = 10,
keep_mitochondrial_genes = TRUE,
variables_to_regress_out = 'nUMI',
number_PCs = 30,
tSNE_perplexity = 30,
cluster_resolution = 0.5
)
seurat@misc$parameters$filtering <- list(
UMI_min = 100,
UMI_max = Inf,
genes_min = 50,
genes_max = Inf
)
seurat@misc$technical_info <- list(
'R' = capture.output(devtools::session_info())
)
seurat <- addPercentMtRibo(
seurat,
organism = 'hg',
gene_nomenclature = 'name'
)
seurat <- getMostExpressedGenes(
seurat,
column_sample = 'sample',
column_cluster = 'cluster'
)
seurat <- getMarkerGenes(
seurat,
organism = 'hg',
column_sample = 'sample',
column_cluster = 'cluster'
)
seurat <- getEnrichedPathways(
seurat,
column_sample = 'sample',
column_cluster = 'cluster',
adj_p_cutoff = 0.01,
max_terms = 100
)
example_gene_set <- system.file("extdata", "example_gene_set.gmt", package = "cerebroApp")
seurat <- performGeneSetEnrichmentAnalysis(
seurat,
GMT_file = example_gene_set,
column_sample = 'sample',
column_cluster = 'cluster',
thresh_p_val = 0.05,
thresh_q_val = 0.1,
parallel.sz = 1,
verbose = FALSE
)
monocle_all_cells <- newCellDataSet(
seurat@assays$RNA@data,
phenoData = new('AnnotatedDataFrame', data = seurat@meta.data),
featureData = new('AnnotatedDataFrame', data = data.frame(
gene_short_name = rownames(seurat@assays$RNA@data),
row.names = rownames(seurat@assays$RNA@data))
)
)
monocle_all_cells <- estimateSizeFactors(monocle_all_cells)
monocle_all_cells <- estimateDispersions(monocle_all_cells)
monocle_all_cells <- setOrderingFilter(monocle_all_cells, seurat@assays$RNA@var.features)
monocle_all_cells <- reduceDimension(monocle_all_cells, max_components = 2, method = 'DDRTree')
monocle_all_cells <- orderCells(monocle_all_cells)
seurat <- extractMonocleTrajectory(monocle_all_cells, seurat, 'all_cells')
cerebroApp::exportFromSeurat(
seurat,
experiment_name = 'pbmc',
file = paste0('cerebro_pbmc_', Sys.Date(), '.crb'),
organism = 'hg',
column_nUMI = 'nCount_RNA',
column_nGene = 'nFeature_RNA'
)
launchCerebro()
getwd()
getwd()
launchCerebro()
View(trajectory_info)
monocle
temp_reducedDimK <- monocle@reducedDimK %>%
t() %>%
as.data.frame() %>%
dplyr::rename(dim_1 = 1, dim_2 = 2)
reduced_dim_K <- temp_reducedDimK %>%
dplyr::mutate(sample_name = rownames(temp_reducedDimK))
edges <- monocle@minSpanningTree %>%
igraph::as_data_frame() %>%
dplyr::rename(source = 'from', target = 'to')
edges <- dplyr::left_join(
edges,
reduced_dim_K %>% dplyr::rename(
source = 'sample_name',
source_dim_1 = 'dim_1',
source_dim_2 = 'dim_2'
),
by = 'source'
)
edges <- dplyr::left_join(
edges,
reduced_dim_K %>% dplyr::rename(
target = 'sample_name',
target_dim_1 = 'dim_1',
target_dim_2 = 'dim_2'
),
by = 'target'
) %>%
dplyr::select(c('source','target','weight','source_dim_1','source_dim_2',
'target_dim_1','target_dim_2'))
trajectory_meta_from_monocle <- data.frame(
cell = rownames(monocle@phenoData@data),
pseudotime = monocle@phenoData@data[[column_pseudotime]],
state = monocle@phenoData@data[[column_state]],
row.names = rownames(monocle@phenoData@data)
)
temp_reducedDimS <- monocle@reducedDimS %>%
t() %>%
as.data.frame() %>%
dplyr::rename(DR_1 = 1, DR_2 = 2)
trajectory_info <- temp_reducedDimS %>%
dplyr::mutate(cell = rownames(temp_reducedDimS))
trajectory_info <- dplyr::left_join(
trajectory_info,
trajectory_meta_from_monocle,
by = 'cell'
)
str(trajectory_meta_from_monocle)
?data.frame
trajectory_meta_from_monocle <- data.frame(
cell = rownames(monocle@phenoData@data),
pseudotime = monocle@phenoData@data[[column_pseudotime]],
state = monocle@phenoData@data[[column_state]],
row.names = rownames(monocle@phenoData@data),
stringsAsFactors = FALSE
)
temp_reducedDimS <- monocle@reducedDimS %>%
t() %>%
as.data.frame() %>%
dplyr::rename(DR_1 = 1, DR_2 = 2)
trajectory_info <- temp_reducedDimS %>%
dplyr::mutate(cell = rownames(temp_reducedDimS))
trajectory_info <- dplyr::left_join(
trajectory_info,
trajectory_meta_from_monocle,
by = 'cell'
)
trajectory_info <- dplyr::left_join(
seurat@meta.data %>% dplyr::mutate(cell = rownames(seurat@meta.data)),
trajectory_info,
by = 'cell'
) %>%
dplyr::select(c('DR_1','DR_2','pseudotime','state','cell'))
rownames(trajectory_info) <- trajectory_info$cell
trajectory_info <- trajectory_info %>% dplyr::select(-'cell')
devtools::install_local('.', force=TRUE)
library(dplyr)
library(Seurat)
library(monocle)
library(cerebroApp)
set.seed(1234567)
seurat <- CreateSeuratObject(
project = 'pbmc',
counts = pbmc,
min.cells = 10
)
seurat <- subset(seurat, subset = nCount_RNA > 50 & nFeature_RNA > 10)
seurat <- NormalizeData(seurat)
seurat <- FindVariableFeatures(seurat)
seurat <- ScaleData(seurat, vars.to.regress = 'nCount_RNA')
seurat <- RunPCA(seurat, features = seurat@assays$RNA@var.features, verbose = FALSE)
seurat <- CreateSeuratObject(
project = 'pbmc',
counts = pbmc,
min.cells = 10
)
seurat <- subset(seurat, subset = nCount_RNA > 50 & nFeature_RNA > 10)
seurat <- NormalizeData(seurat, verbose = FALSE)
seurat <- FindVariableFeatures(seurat, verbose = FALSE)
seurat <- ScaleData(seurat, vars.to.regress = 'nCount_RNA', verbose = FALSE)
seurat <- RunPCA(seurat, features = seurat@assays$RNA@var.features, verbose = FALSE)
seurat <- FindNeighbors(seurat)
seurat <- FindClusters(seurat, resolution = 0.5)
seurat <- BuildClusterTree(
seurat,
dims = 1:30,
reorder = TRUE,
reorder.numeric = TRUE,
verbose = FALSE
)
seurat <- RunUMAP(
seurat,
reduction.name = 'UMAP',
reduction.key = 'UMAP_',
dims = 1:30,
n.components = 2,
seed.use = 100,
verbose = FALSE
)
seurat <- RunUMAP(
seurat,
reduction.name = 'UMAP_3D',
reduction.key = 'UMAP3D_',
dims = 1:30,
n.components = 3,
seed.use = 100,
verbose = FALSE
)
